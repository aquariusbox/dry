// Auto-generated from map_usage.html.
// DO NOT EDIT.

library map_usage_html;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'custom_ui.dart';
import 'dart:html';
import 'package:web_ui/web_ui.dart';
import 'dart:async';
import 'dart:json' as json;
import 'package:js/js.dart' as js;


// Original code


const SERVICE = '/dry/service-rules-usage';
const TESTING_PORT = '8888';
const HEADING_OF_TABLE = 'Rules / PMT';
String port;
String service;
List<String> formats = toObservable(new List<String>());
List<String> datasources = toObservable(new List<String>());
List<String> convTypes = toObservable(new List<String>());
List<String> segments = toObservable(new List<String>());
List<String> fields = toObservable(new List<String>());

final __changes = new __observe.Observable();

String __$selectedFormat = 'CTCS2X/315';
String get selectedFormat {
  if (__observe.observeReads) {
    __observe.notifyRead(__changes, __observe.ChangeRecord.FIELD, 'selectedFormat');
  }
  return __$selectedFormat;
}
set selectedFormat(String value) {
  if (__observe.hasObservers(__changes)) {
    __observe.notifyChange(__changes, __observe.ChangeRecord.FIELD, 'selectedFormat',
        __$selectedFormat, value);
  }
  __$selectedFormat = value;
}
String selectedDatasource = 'b2bowner@stg';
String selectedConvType = '315';
String selectedSegment = 'Exception';
String selectedField = '*';

main(){
  initialize();
}

// Get the base url
String getBaseUrl(){
  return window.location.protocol + '//'+ window.location.hostname + ':$port$service';
}

void initialize(){  
  port = window.location.port == '3030' ? TESTING_PORT : window.location.port;
  service = window.location.port == '3030' ? SERVICE : '/dry'+SERVICE;
  fetchDatasources();
}

void fetchDatasources(){
  var url =  getBaseUrl()+'?opt=datasources';
  var request = HttpRequest.getString(url).then((jstr){
    datasources.addAll(json.parse(jstr));
    fetchFormats();
  });
}

void fetchFormats(){
  var url =  getBaseUrl()+'?opt=formats&ds=${selectedDatasource}';
  var request = HttpRequest.getString(url).then((jstr){
    formats.clear();
    formats.addAll(json.parse(jstr)); 
    // Auto select first if not found
    if(!formats.contains(selectedFormat))
      selectedFormat = formats.first;
    fetchConvTypes();
  });
}

void fetchConvTypes(){
  var url =  getBaseUrl()+'?opt=convTypes&ds=${selectedDatasource}&fmt=${selectedFormat}';
  var request = HttpRequest.getString(url).then((jstr){
    convTypes.clear();
    convTypes.addAll(json.parse(jstr));
    // Auto select first if not found
    if(!convTypes.contains(selectedConvType))
      selectedConvType = convTypes.first;
    fetchSegments();
  });
}

void fetchSegments(){
  var url =  getBaseUrl()+'?opt=segments&ds=${selectedDatasource}&fmt=${selectedFormat}&cvt=${selectedConvType}';
  var request = HttpRequest.getString(url).then((jstr){
    segments.clear();
    segments.addAll(json.parse(jstr));
    // Auto select first if not found
    if(!segments.contains(selectedSegment))
      selectedSegment = segments.first;
    fetchFields();
  });
}

void fetchFields(){
  var url =  getBaseUrl()+'?opt=fields&ds=$selectedDatasource&fmt=$selectedFormat&cvt=$selectedConvType&seg=$selectedSegment';
  var request = HttpRequest.getString(url).then((jstr){
    fields.clear();
    fields.addAll(json.parse(jstr));
    fields.add('*');
    // Auto select first if not found
    if(!fields.contains(selectedField))
      selectedField = fields.first;
    fetchMatrix();
  });
}

void fetchMatrix(){
  var url = getBaseUrl()+'?opt=matrix&ds=${selectedDatasource}&fmt=$selectedFormat&cvt=$selectedConvType&seg=$selectedSegment&snum=$selectedField';
  var request = HttpRequest.getString(url).then((jstr){
    Map jmap = json.parse(jstr);
    // Create matrix table
    Matix matrix = new Matix("matrix", ['fancyTable']);
    List<String> headings = new List();
    headings.add(HEADING_OF_TABLE);
    headings.addAll(jmap['tpIds']);
    matrix.bindHeader(headings);
    matrix.bindData(headings, jmap['keys'], jmap['sequences'],jmap['paths']);
    
    var parent = query('#div-matrix');
    if(parent.hasChildNodes())
      parent.children.removeLast();
    
    add2Dom(matrix, parent);
    
    jsFixTableHeader("#matrix",  jmap['paths'].length);
  });
}

void onDatasourcesChange(){
  fetchFormats();
}
void onFormatsChange(){
  fetchConvTypes();
}


void jsFixTableHeader(String selector, int numOfRec){
  var height = (numOfRec+1) * 40 > 750 ? 750 : ((numOfRec+1) * 40) + 10;
  js.scoped((){
    //var param = js.map({'footer': true, 'cloneHeadToFoot': true, 'fixedColumns' : 1});
    var param = js.map({'footer': height >= 750, 'cloneHeadToFoot': true,'height':height,'fixedColumns' : 1});
    js.context.jQuery(selector).fixedHeaderTable(param);
    }  
  );
}

class Matix extends View{
  // Tag table
  TableElement _table;
  
  Matix(String id, List<String> styles){
    _table = new Element.tag("table");
    _table.id = id;
    //_table.classes = ['table table-bordered table-condensed table-hover fancyTable'];
    // _table.classes = ['fancyTable'];
    _table.classes = styles;
  }
  
  // Bind table header
  void bindHeader(List<String> headings, [List<String> rowStyle, List<String> cellStyle]){
    Element thead = new Element.tag('thead');
    TableRowElement row = new Element.tr();
    if(rowStyle != null)
      row.classes = rowStyle;
    thead.nodes.add(row);
    headings.forEach((heading){
      TableCellElement cell = new Element.th();
      if(cellStyle != null)
        cell.classes = cellStyle;
      cell.text = heading;
      row.nodes.add(cell);      
    });
    _table.nodes.add(thead);
  }
  
  // bind the data item into the table
  void bindData(List<String> headings, List<String> keysOfRule, Map<String,String> sequences,  Map<String,Map<String,String>> paths){
    Element tbody = new Element.tag('tbody');
    keysOfRule.forEach((current){
      TableRowElement row = new Element.tr();
      tbody.nodes.add(row);
      var idxColn = 0;
      headings.forEach((heading){
        var id = current+"-"+heading;
        var fieldValue = ' ';
        if(heading != HEADING_OF_TABLE){
          if(sequences.containsKey(id))
            fieldValue = '<span class="label label-info">'+sequences[id]+'</span>';  
        } else { // Print the rule name
            fieldValue = '<p><span class="badge">'+paths[current]['ruleCase']+'</span> ' + 
                paths[current]['segNum']+" / "+paths[current]['ruleName']+"</p>";
        }
          
        TableCellElement cell = new Element.td();
        if(fieldValue.contains("span")){
          if(idxColn++ > 0)
             cell.attributes = {"align":"center"};
          cell.nodes.add(new Element.html(fieldValue));
        }else
          cell.text = fieldValue;
        row.nodes.add(cell);
      });
    });
    _table.nodes.add(tbody);
  }
  
  // Returns a list of elements to be added to DOM.
  List<Element> get elements {
    List<Element> result = new List();
    result.add(_table);
    return result;
  }  
  
}

abstract class View{
  List<Element> elements;
}

// Add view to DOM tree
void add2Dom(View view, [Element parent]){
  if(parent == null){
    parent = document.body;
  }
  parent.nodes.addAll(view.elements);
}
// Additional generated code
void init_autogenerated() {
  var __root = autogenerated.document.body;
  final __html0 = new autogenerated.OptionElement(), __html1 = new autogenerated.OptionElement(), __html2 = new autogenerated.OptionElement(), __html3 = new autogenerated.OptionElement(), __html4 = new autogenerated.OptionElement();
  var __e0, __e12, __e15, __e3, __e6, __e9;
  var __t = new autogenerated.Template(__root);
  __e0 = __root.nodes[3];
  __t.oneWayBind(() => 't-rbase', (e) { if (__e0.xtag.activeid != e) __e0.xtag.activeid = e; }, false, false);
  __t.component(new Navbar()..host = __e0);
  __e3 = __root.nodes[5].nodes[3].nodes[1].nodes[1];
  __t.listen(__e3.onChange, ($event) { selectedDatasource = __e3.value; });
  __t.listen(__e3.onChange, ($event) { onDatasourcesChange(); });
  __t.oneWayBind(() => selectedDatasource, (e) { if (__e3.value != e) __e3.value = e; }, false, false);
  __t.loopIterateAttr(__e3, () => datasources, ($list, $index, __t) {
    var datasource = $list[$index];
    var __e2;
    __e2 = __html0.clone(true);
    var __binding1 = __t.contentBind(() => datasource, false);
    __e2.nodes.add(__binding1);
    __t.oneWayBind(() => selectedDatasource == datasource, (e) { if (__e2.selected != e) __e2.selected = e; }, false, false);
  __t.addAll([new autogenerated.Text('\n            '),
      __e2,
      new autogenerated.Text('\n          ')]);
  });
  __e6 = __root.nodes[5].nodes[3].nodes[3].nodes[1];
  __t.listen(__e6.onChange, ($event) { selectedFormat = __e6.value; });
  __t.listen(__e6.onChange, ($event) { onFormatsChange(); });
  __t.oneWayBind(() => selectedFormat, (e) { if (__e6.value != e) __e6.value = e; }, false, false);
  __t.loopIterateAttr(__e6, () => formats, ($list, $index, __t) {
    var format = $list[$index];
    var __e5;
    __e5 = __html1.clone(true);
    var __binding4 = __t.contentBind(() => format, false);
    __e5.nodes.add(__binding4);
    __t.oneWayBind(() => selectedFormat == format, (e) { if (__e5.selected != e) __e5.selected = e; }, false, false);
  __t.addAll([new autogenerated.Text('\n            '),
      __e5,
      new autogenerated.Text('\n          ')]);
  });
  __e9 = __root.nodes[5].nodes[3].nodes[5].nodes[1];
  __t.listen(__e9.onChange, ($event) { selectedConvType = __e9.value; });
  __t.listen(__e9.onChange, ($event) { fetchSegments(); });
  __t.oneWayBind(() => selectedConvType, (e) { if (__e9.value != e) __e9.value = e; }, false, false);
  __t.loopIterateAttr(__e9, () => convTypes, ($list, $index, __t) {
    var convType = $list[$index];
    var __e8;
    __e8 = __html2.clone(true);
    var __binding7 = __t.contentBind(() => convType, false);
    __e8.nodes.add(__binding7);
    __t.oneWayBind(() => selectedConvType == convType, (e) { if (__e8.selected != e) __e8.selected = e; }, false, false);
  __t.addAll([new autogenerated.Text('\n            '),
      __e8,
      new autogenerated.Text('\n          ')]);
  });
  __e12 = __root.nodes[5].nodes[3].nodes[7].nodes[1];
  __t.listen(__e12.onChange, ($event) { selectedSegment = __e12.value; });
  __t.listen(__e12.onChange, ($event) { fetchFields(); });
  __t.oneWayBind(() => selectedSegment, (e) { if (__e12.value != e) __e12.value = e; }, false, false);
  __t.loopIterateAttr(__e12, () => segments, ($list, $index, __t) {
    var segment = $list[$index];
    var __e11;
    __e11 = __html3.clone(true);
    var __binding10 = __t.contentBind(() => segment, false);
    __e11.nodes.add(__binding10);
    __t.oneWayBind(() => selectedSegment == segment, (e) { if (__e11.selected != e) __e11.selected = e; }, false, false);
  __t.addAll([new autogenerated.Text('\n            '),
      __e11,
      new autogenerated.Text('\n          ')]);
  });
  __e15 = __root.nodes[5].nodes[3].nodes[9].nodes[1];
  __t.listen(__e15.onChange, ($event) { selectedField = __e15.value; });
  __t.listen(__e15.onChange, ($event) { fetchMatrix(); });
  __t.oneWayBind(() => selectedField, (e) { if (__e15.value != e) __e15.value = e; }, false, false);
  __t.loopIterateAttr(__e15, () => fields, ($list, $index, __t) {
    var field = $list[$index];
    var __e14;
    __e14 = __html4.clone(true);
    var __binding13 = __t.contentBind(() => field, false);
    __e14.nodes.add(__binding13);
    __t.oneWayBind(() => selectedField == field, (e) { if (__e14.selected != e) __e14.selected = e; }, false, false);
  __t.addAll([new autogenerated.Text('\n            '),
      __e14,
      new autogenerated.Text('\n          ')]);
  });
  __t.create();
  __t.insert();
}

//# sourceMappingURL=map_usage.dart.map