// Auto-generated from map_usage.html.
// DO NOT EDIT.

library map_usage_html;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'custom_ui.dart';
import 'dart:html';
import 'package:web_ui/web_ui.dart';
import 'dart:async';
import 'dart:json' as json;
import 'package:js/js.dart' as js;
import '../utils.dart' as dry;


// Original code


const int MATRIX_HEIGHT = 750;
const MATRIX_HEADING = 'Rules / PMT';
const SERVICE = '/dry/service-rules-usage';

List<String> formats = toObservable(new List<String>());
List<String> datasources = toObservable(new List<String>());
List<String> convTypes = toObservable(new List<String>());
List<String> segments = toObservable(new List<String>());
List<String> fields = toObservable(new List<String>());
List<String> rulecases = toObservable(new List<String>());

final __changes = new __observe.Observable();

String __$selectedFormat = 'CTCS2X/315';
String get selectedFormat {
  if (__observe.observeReads) {
    __observe.notifyRead(__changes, __observe.ChangeRecord.FIELD, 'selectedFormat');
  }
  return __$selectedFormat;
}
set selectedFormat(String value) {
  if (__observe.hasObservers(__changes)) {
    __observe.notifyChange(__changes, __observe.ChangeRecord.FIELD, 'selectedFormat',
        __$selectedFormat, value);
  }
  __$selectedFormat = value;
}
String selectedDatasource = 'b2bowner@stg';
String selectedConvType = '315';
String selectedSegment = 'Exception';
String selectedField = '*';
String selectedRulecase = '*';

Map metas;

main(){
  // initialize
  fetchDatasources();
}

void fetchDatasources(){
  var url = dry.getBaseUrl(SERVICE)+parametersStr('datasources');
  var request = HttpRequest.getString(url).then((jstr){
    datasources.addAll(json.parse(jstr));
    fetchFormats();
  });
}

void fetchFormats(){
  var url = dry.getBaseUrl(SERVICE)+parametersStr('formats', selectedDatasource);
  var request = HttpRequest.getString(url).then((jstr){
    formats.clear();
    formats.addAll(json.parse(jstr)); 
    // Auto select first if not found
    if(!formats.contains(selectedFormat))
      selectedFormat = formats.first;
    fetchConvTypes();
  });
}

void fetchConvTypes(){
  var url = dry.getBaseUrl(SERVICE)+parametersStr('convTypes', selectedDatasource, selectedFormat);
  var request = HttpRequest.getString(url).then((jstr){
    convTypes.clear();
    convTypes.addAll(json.parse(jstr));
    // Auto select first if not found
    if(!convTypes.contains(selectedConvType))
      selectedConvType = convTypes.first;
    fetchSegments();
  });
}

void fetchSegments(){
  var url = dry.getBaseUrl(SERVICE)+parametersStr('segments', selectedDatasource, selectedFormat, selectedConvType);
  var request = HttpRequest.getString(url).then((jstr){
    segments.clear();
    segments.addAll(json.parse(jstr));
    // Auto select first if not found
    if(!segments.contains(selectedSegment))
      selectedSegment = segments.first;
    fetchFields();
  });
}

void fetchFields(){
  var url = dry.getBaseUrl(SERVICE)+parametersStr('fields', selectedDatasource, selectedFormat, selectedConvType, selectedSegment);
  var request = HttpRequest.getString(url).then((jstr){
    fields.clear();
    fields.addAll(json.parse(jstr));
    fields.add('*');
    // Auto select first if not found
    if(!fields.contains(selectedField))
      selectedField = fields.first;
    fetchCases();
  });
}

void fetchCases(){
  var url = dry.getBaseUrl(SERVICE)+parametersStr('cases', selectedDatasource, selectedFormat, selectedConvType, selectedSegment, selectedField);
  var request = HttpRequest.getString(url).then((jstr){
    rulecases.clear();
    rulecases.addAll(json.parse(jstr));
    // Auto select first if not found
    if(!rulecases.contains(selectedRulecase))
      selectedRulecase = rulecases.first;
    fetchMatrix();
  });
}

void fetchMatrix(){
  dry.loading(true);
  var url = dry.getBaseUrl(SERVICE)+parametersStr('matrix', selectedDatasource, selectedFormat, selectedConvType, selectedSegment, selectedField, selectedRulecase);
  var request = HttpRequest.getString(url).then((jstr){
    Map jmap = json.parse(jstr);
    // Create matrix table
    Matrix matrix = new Matrix("matrix", ['fancyTable']);
    List<String> headings = new List();
    headings.add(MATRIX_HEADING);
    headings.addAll(jmap['tpIds']);
    matrix.bindHeader(headings);
    matrix.bindData(headings, jmap['keys'], jmap['sequences'],jmap['detail']);
    
    var parent = query('#div-matrix');
    if(parent.hasChildNodes())
      parent.children.removeLast();
    
    dry.add2Dom(matrix, parent);
    
    jsFixTableHeader("#matrix",  jmap['detail'].length);
    
    dry.loading(false);
    fetchDocument();
  }); 
}

String parametersStr(String operation, [String datasource, String format, String convertType, String segId, String segNum, String ruleCase]){
  var parameters = '?opt='+operation;
  if(datasource != null)
    parameters = parameters +'&ds=' + datasource;
  if(format != null)
    parameters = parameters +'&fmt=' + format;
  if(convertType != null)
    parameters = parameters +'&cvt=' + convertType;
  if(segId != null)
    parameters = parameters +'&seg=' + segId;
  if(segId != null)
    parameters = parameters +'&seg=' + segId;
  if(segNum != null)
    parameters = parameters +'&snum=' + segNum;
  if(ruleCase != null)
    parameters = parameters +'&case=' + ruleCase;
  return parameters;
}

void fetchDocument(){
  dry.loading(true);
  var url = dry.getBaseUrl(SERVICE)+parametersStr('document', selectedDatasource, selectedFormat, selectedConvType, selectedSegment, selectedField, selectedRulecase);
  var request = HttpRequest.getString(url).then((jstr){
      metas = json.parse(jstr);
      if(query('#definition') != null){
        var divs = queryAll('#definition');
        for(Element div in divs){
          div.remove();
        }
      }
  
      for(String fingerprint in metas.keys){
        var rule = metas[fingerprint]['rule'];
        var meta = metas[fingerprint]['meta'];
        Definition def = new Definition();
        def.bindData(fingerprint, rule, meta);
        dry.add2Dom(def);    
      }
      // Pretty print code.
      dry.jsprettyPrint();
  });
  dry.loading(false);
  return;
}

/**
 * When list of datasource is changed.
 */
void onDatasourcesChange(){
  fetchFormats();
}

/**
 * When list of formats is changed.
 */
void onFormatsChange(){
  fetchConvTypes();
}

/**
 * Call javascript to fix the first row and first colume in matrix table.
 */
void jsFixTableHeader(String selector, int numOfRec){
  var height = (numOfRec+1) * 40 > MATRIX_HEIGHT ? MATRIX_HEIGHT : ((numOfRec+1) * 40) + 10;
  js.scoped((){
    // Need footer if height of table LT matrix height.
    var param = js.map({'footer': height >= MATRIX_HEIGHT, 'cloneHeadToFoot': true,'height':height,'fixedColumns' : 1});
    js.context.jQuery(selector).fixedHeaderTable(param);
    }  
  );
}

/**
 * Definition view for each rule.
 */
class Definition extends dry.View {
  DivElement _div;
  
  Definition(){
    _div = new Element.div();
    _div.classes = ['container'];
    _div.id = 'definition';
  }
  
  void bindData(String fingerprint, Map rule, Map meta){
    Element h4 = new Element.tag('h4');
    h4.text = 'Definition of ${rule['ruleName']}';
    _div.nodes.add(h4);
    // Prepare anchor
    Element anchor = new Element.a();
    anchor.attributes = {"name":fingerprint};
    anchor.text ="#";
    h4.nodes.add(anchor);
    
    Element p = new Element.p(); 
    p.id = 'description';
    p.innerHtml = meta != null ? meta['description'] : "No description";

    Element pre = new Element.pre();
    pre.classes = ['prettyprint lang-dart'];
    pre.text = meta != null ? meta['pseudocode'] : "No logic";
    
    anchor = new Element.a();
    anchor.attributes = {'href':'#top'};
    anchor.classes = ['anchor-top'];
    anchor.text = 'Back to top';
    
    _div.nodes.add(p);
    _div.nodes.add(pre);
    _div.nodes.add(anchor);
  }
  
  // Returns a list of elements to be added to DOM.
  List<Element> get elements {
    List<Element> result = new List();
    result.add(_div);
    return result;
  }    
}

/**
 * Matrix table of rules usage.
 */
class Matrix extends dry.View{
  // Tag table
  TableElement _table;
  
  Matrix(String id, List<String> styles){
    _table = new Element.tag("table");
    _table.id = id;
    _table.classes = styles;
  }
  
  // Bind header
  void bindHeader(List<String> headings, [List<String> rowStyle, List<String> cellStyles]){
    Element thead = new Element.tag('thead');
    TableRowElement tr = new Element.tr();
    if(rowStyle != null)
      tr.classes = rowStyle;
    thead.nodes.add(tr);
    
    headings.forEach((heading){
      TableCellElement th = new Element.th();
      if(cellStyles != null)
        th.classes = cellStyles;
      th.text = heading;
      tr.nodes.add(th);      
    });
    _table.nodes.add(thead);
  }
  
  Element createAnchor(String id, String text){
    AnchorElement anchor = new Element.a();
    anchor.text = text;
    return anchor;
  }
  
  /**
   * Assign value into table cell.
   */
  void bindData(List<String> headings, List<String> fingerprints, Map<String,String> sequences,  Map<String,Map<String,String>> detail){
    Element tbody = new Element.tag('tbody');
    fingerprints.forEach((fingerprint){
      TableRowElement tr = new Element.tr();
      tbody.nodes.add(tr);
      
      var idxColn = 0;
      headings.forEach((heading){
        var fingerprintTp = fingerprint+"-"+heading;
        var fieldValue = ' ';
        // Not 1st column
        if(heading != MATRIX_HEADING){
          if(sequences.containsKey(fingerprintTp))
            fieldValue = '<span class="label label-info">'+sequences[fingerprintTp]+'</span>';  
        } else { 
            // Print the rule name
            fieldValue = '<p><span class="badge">'+detail[fingerprint]['ruleCase']+'</span> ' + 
                '<a href="#$fingerprint">'+detail[fingerprint]['segNum']+" / "+detail[fingerprint]['ruleName']+'</a>'
                "</p>"; 
        }
          
        TableCellElement td = new Element.td();
        if(fieldValue.contains("span")){
          if(idxColn++ > 0)
             td.attributes = {"align":"center"};
          td.nodes.add(new Element.html(fieldValue));
        }
        else
          td.text = fieldValue;
        tr.nodes.add(td);
      });
    });
    _table.nodes.add(tbody);
  }
  
  // Returns a list of elements to be added to DOM.
  List<Element> get elements {
    List<Element> result = new List();
    result.add(_table);
    return result;
  }  
  
}

// Additional generated code
void init_autogenerated() {
  var __root = autogenerated.document.body;
  final __html0 = new autogenerated.OptionElement(), __html1 = new autogenerated.OptionElement(), __html2 = new autogenerated.OptionElement(), __html3 = new autogenerated.OptionElement(), __html4 = new autogenerated.OptionElement(), __html5 = new autogenerated.OptionElement();
  var __e0, __e12, __e15, __e18, __e3, __e6, __e9;
  var __t = new autogenerated.Template(__root);
  __e0 = __root.nodes[3];
  __t.oneWayBind(() => 't-rbase', (e) { if (__e0.xtag.activeid != e) __e0.xtag.activeid = e; }, false, false);
  __t.component(new Navbar()..host = __e0);
  __e3 = __root.nodes[5].nodes[3].nodes[1].nodes[1];
  __t.listen(__e3.onChange, ($event) { selectedDatasource = __e3.value; });
  __t.listen(__e3.onChange, ($event) { onDatasourcesChange(); });
  __t.oneWayBind(() => selectedDatasource, (e) { if (__e3.value != e) __e3.value = e; }, false, false);
  __t.loopIterateAttr(__e3, () => datasources, ($list, $index, __t) {
    var datasource = $list[$index];
    var __e2;
    __e2 = __html0.clone(true);
    var __binding1 = __t.contentBind(() => datasource, false);
    __e2.nodes.add(__binding1);
    __t.oneWayBind(() => selectedDatasource == datasource, (e) { if (__e2.selected != e) __e2.selected = e; }, false, false);
  __t.addAll([new autogenerated.Text('\n                  '),
      __e2,
      new autogenerated.Text('\n               ')]);
  });
  __e6 = __root.nodes[5].nodes[3].nodes[3].nodes[1];
  __t.listen(__e6.onChange, ($event) { selectedFormat = __e6.value; });
  __t.listen(__e6.onChange, ($event) { onFormatsChange(); });
  __t.oneWayBind(() => selectedFormat, (e) { if (__e6.value != e) __e6.value = e; }, false, false);
  __t.loopIterateAttr(__e6, () => formats, ($list, $index, __t) {
    var format = $list[$index];
    var __e5;
    __e5 = __html1.clone(true);
    var __binding4 = __t.contentBind(() => format, false);
    __e5.nodes.add(__binding4);
    __t.oneWayBind(() => selectedFormat == format, (e) { if (__e5.selected != e) __e5.selected = e; }, false, false);
  __t.addAll([new autogenerated.Text('\n                  '),
      __e5,
      new autogenerated.Text('\n               ')]);
  });
  __e9 = __root.nodes[5].nodes[3].nodes[5].nodes[1];
  __t.listen(__e9.onChange, ($event) { selectedConvType = __e9.value; });
  __t.listen(__e9.onChange, ($event) { fetchSegments(); });
  __t.oneWayBind(() => selectedConvType, (e) { if (__e9.value != e) __e9.value = e; }, false, false);
  __t.loopIterateAttr(__e9, () => convTypes, ($list, $index, __t) {
    var convType = $list[$index];
    var __e8;
    __e8 = __html2.clone(true);
    var __binding7 = __t.contentBind(() => convType, false);
    __e8.nodes.add(__binding7);
    __t.oneWayBind(() => selectedConvType == convType, (e) { if (__e8.selected != e) __e8.selected = e; }, false, false);
  __t.addAll([new autogenerated.Text('\n                  '),
      __e8,
      new autogenerated.Text('\n               ')]);
  });
  __e12 = __root.nodes[5].nodes[3].nodes[7].nodes[1];
  __t.listen(__e12.onChange, ($event) { selectedSegment = __e12.value; });
  __t.listen(__e12.onChange, ($event) { fetchFields(); });
  __t.oneWayBind(() => selectedSegment, (e) { if (__e12.value != e) __e12.value = e; }, false, false);
  __t.loopIterateAttr(__e12, () => segments, ($list, $index, __t) {
    var segment = $list[$index];
    var __e11;
    __e11 = __html3.clone(true);
    var __binding10 = __t.contentBind(() => segment, false);
    __e11.nodes.add(__binding10);
    __t.oneWayBind(() => selectedSegment == segment, (e) { if (__e11.selected != e) __e11.selected = e; }, false, false);
  __t.addAll([new autogenerated.Text('\n                  '),
      __e11,
      new autogenerated.Text('\n               ')]);
  });
  __e15 = __root.nodes[5].nodes[3].nodes[9].nodes[1];
  __t.listen(__e15.onChange, ($event) { selectedField = __e15.value; });
  __t.listen(__e15.onChange, ($event) { fetchCases(); });
  __t.oneWayBind(() => selectedField, (e) { if (__e15.value != e) __e15.value = e; }, false, false);
  __t.loopIterateAttr(__e15, () => fields, ($list, $index, __t) {
    var field = $list[$index];
    var __e14;
    __e14 = __html4.clone(true);
    var __binding13 = __t.contentBind(() => field, false);
    __e14.nodes.add(__binding13);
    __t.oneWayBind(() => selectedField == field, (e) { if (__e14.selected != e) __e14.selected = e; }, false, false);
  __t.addAll([new autogenerated.Text('\n                  '),
      __e14,
      new autogenerated.Text('\n               ')]);
  });
  __e18 = __root.nodes[5].nodes[3].nodes[11].nodes[1];
  __t.listen(__e18.onChange, ($event) { selectedRulecase = __e18.value; });
  __t.listen(__e18.onChange, ($event) { fetchMatrix(); });
  __t.oneWayBind(() => selectedRulecase, (e) { if (__e18.value != e) __e18.value = e; }, false, false);
  __t.loopIterateAttr(__e18, () => rulecases, ($list, $index, __t) {
    var rulecase = $list[$index];
    var __e17;
    __e17 = __html5.clone(true);
    var __binding16 = __t.contentBind(() => rulecase, false);
    __e17.nodes.add(__binding16);
    __t.oneWayBind(() => selectedRulecase == rulecase, (e) { if (__e17.selected != e) __e17.selected = e; }, false, false);
  __t.addAll([new autogenerated.Text('\n                  '),
      __e17,
      new autogenerated.Text('\n               ')]);
  });
  __t.create();
  __t.insert();
}

//# sourceMappingURL=map_usage.dart.map